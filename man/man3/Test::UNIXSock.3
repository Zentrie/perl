.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::UNIXSock 3"
.TH Test::UNIXSock 3 "2019-04-27" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::UNIXSock \- testing UNIX domain socket program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::UNIXSock;
\&
\&    my $server = Test::UNIXSock\->new(
\&        code => sub {
\&            my $path = shift;
\&            ...
\&        },
\&    );
\&    my $client = MyClient\->new( sock => $server\->path );
\&    undef $server; # kill child process on DESTROY
.Ve
.PP
Using memcached:
.PP
.Vb 1
\&    use Test::UNIXSock;
\&
\&    my $memcached = Test::UNIXSock\->new(
\&        code => sub {
\&            my $path = shift;
\&
\&            exec $bin, \*(Aq\-s\*(Aq => $path;
\&            die "cannot execute $bin: $!";
\&        },
\&    );
\&    my $memd = Cache::Memcached\->new({servers => [$memcached\->path]});
\&    ...
.Ve
.PP
And functional interface is available:
.PP
.Vb 11
\&    use Test::UNIXSock;
\&    test_unix_sock(
\&        client => sub {
\&            my ($path, $server_pid) = @_;
\&            # send request to the server
\&        },
\&        server => sub {
\&            my $path = shift;
\&            # run server
\&        },
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::UNIXSock is a test utility to test \s-1UNIX\s0 domain socket server programs.
.PP
This is based on Test::TCP.
.SH "METHODS"
.IX Header "METHODS"
.IP "test_unixsock" 4
.IX Item "test_unixsock"
Functional interface.
.Sp
.Vb 10
\&    test_unixsock(
\&        client => sub {
\&            my $path = shift;
\&            # send request to the server
\&        },
\&        server => sub {
\&            my $path = shift;
\&            # run server
\&        },
\&        # optional
\&        path => "/tmp/mytest.sock", # if not specified, create a sock in tmpdir
\&        max_wait => 3, # seconds
\&    );
.Ve
.IP "wait_unix_sock" 4
.IX Item "wait_unix_sock"
.Vb 1
\&    wait_unix_sock({ path => $path });
.Ve
.Sp
Waits for a particular path is available for connect.
.SH "Object Oriented interface interface"
.IX Header "Object Oriented interface interface"
.ie n .IP "my $server = Test::UNIXSock\->new(%args);" 4
.el .IP "my \f(CW$server\fR = Test::UNIXSock\->new(%args);" 4
.IX Item "my $server = Test::UNIXSock->new(%args);"
Create new instance of Test::UNIXSock.
.Sp
Arguments are following:
.RS 4
.ie n .IP "$args{auto_start}: Boolean" 4
.el .IP "\f(CW$args\fR{auto_start}: Boolean" 4
.IX Item "$args{auto_start}: Boolean"
Call \f(CW\*(C`$server\->start()\*(C'\fR after create instance.
.Sp
Default: true
.ie n .IP "$args{code}: CodeRef" 4
.el .IP "\f(CW$args\fR{code}: CodeRef" 4
.IX Item "$args{code}: CodeRef"
The callback function. Argument for callback function is: \f(CW\*(C`$code\->($pid)\*(C'\fR.
.Sp
This parameter is required.
.ie n .IP "$args{max_wait} : Number" 4
.el .IP "\f(CW$args\fR{max_wait} : Number" 4
.IX Item "$args{max_wait} : Number"
Will wait for at most \f(CW$max_wait\fR seconds before checking port.
.Sp
See also Net::EmptyPort.
.Sp
\&\fIDefault: 10\fR
.RE
.RS 4
.RE
.ie n .IP "$server\->\fBstart()\fR" 4
.el .IP "\f(CW$server\fR\->\fBstart()\fR" 4
.IX Item "$server->start()"
Start the server process. Normally, you don't need to call this method.
.ie n .IP "$server\->\fBstop()\fR" 4
.el .IP "\f(CW$server\fR\->\fBstop()\fR" 4
.IX Item "$server->stop()"
Stop the server process.
.ie n .IP "my $pid = $server\->\fBpid()\fR;" 4
.el .IP "my \f(CW$pid\fR = \f(CW$server\fR\->\fBpid()\fR;" 4
.IX Item "my $pid = $server->pid();"
Get the pid of child process.
.ie n .IP "my $port = $server\->\fBport()\fR;" 4
.el .IP "my \f(CW$port\fR = \f(CW$server\fR\->\fBport()\fR;" 4
.IX Item "my $port = $server->port();"
Get the port number of child process.
.SH "FAQ"
.IX Header "FAQ"
See also Test::TCP \s-1FAQ\s0 section.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fujiwara Shunichiro <fujiwara.shunichiro@gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::TCP
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
This module is based on Test::TCP. copyright (c) 2013 by Tokuhiro Matsuno <tokuhirom@gmail.com>.
